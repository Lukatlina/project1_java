package 장소;

import 특수행동.자유행동;
import 특수행동.트레이닝.*;
import 특수행동.아르바이트.*;

import java.util.Random;
import java.util.Scanner;

import 캐릭터.*;

public class 스테이지 {

    트레이닝 보컬트레이닝 = new 보컬트레이닝(1, 3);
    트레이닝 랩트레이닝 = new 랩트레이닝(1, 3);
    트레이닝 댄스트레이닝 = new 댄스트레이닝(1, 3);
    트레이닝 표정연구하기 = new 표정연구하기(1, 3);

    아르바이트 카페아르바이트 = new 카페아르바이트(5, 28000, 1, 1);
    아르바이트 인형탈아르바이트 = new 인형탈아르바이트(5, 38000, 1);
    아르바이트 프로모터아르바이트 = new 프로모터아르바이트(5, 48000, 1);
    자유행동 자유행동 = new 자유행동(30000, 10, 5);

    Scanner sc = new Scanner(System.in);
    Random 랜덤 = new Random();

    // 각각의 코드들이 지금은 메소드가 3개지만 3개의 메소드를 선언하거나 잘 만들면 선언안할 수도? -> 각각 클래스로 들어가면 비슷한 코드 3개 안나옴
    // 아르바이트에 선언해서 상속을 받는 것이 좋을 것 같다. -> 능력치들을 아르바이트에 선언하고 어떤 아르바이트를 하던 저 능력치를 덧셈해주면 됨.
    // 상승해야하는 능력치에만 덧셈이 되도록 하면 됨. 로직상으로는 덧셈이 되어있지만 0으로 더하면 된다.
    // 굳이 합칠 필요는 없지만 코드 역할을 분명히 하는게 좋다 -> 스테이지에 들어갈 코드는 아니다. 각각 아르바이트에 넣는게 좋을 것
    // 거기서 override해서 써도 좋을듯
    // 알바하기 메소드 안에서 랜덤으로 값을 지정해 줄 수도 있다.
    // 코드의 양도 중요하지만 코드의 위치고 적절한 예상 가능한 위치여야 한다. 직관적인 위치. 역할에 맞아야 한다.
    // 각각의 코드나 클래스나 파일은 각각의 역할이 있다. 알바를 한다는 것은 알바에 간다고 생각한다.
    // 스테이지에서는 어떤 알바를 할지 선택하는 것이 좋다.
    // 클래스 설계는 역할 분류에 가깝다. 하나의 클래스가 너무 많은 책임을 가지면 안된다. 각각의 클래스에 적절히 책임을 분배해야한다.
    // 코드가 보기에 깔끔해야 한다. if문으로 나누는 것보다 그냥 메소드 하나만 실행해도 알아서 분류되는 것이 좋음. -> 코드를 합치는 작업.


    // 연습생한테 기능을 다 주고 개인연습생 -> 상속을 받아서 더 좋아졌는가?
    // 랩과 보컬을 라이벌한테도 따로 나누지 않아도 될 듯. 캐릭터들한테 이름을 주는게 나을듯
    // ex) 춘배 덕배 -> 사람마다 특징을 주는 것이 나을 수도 있을듯. 전용 스킬을 주는 것도 좋을 듯 하다.
    // 나눌 필요 없는 것은 굳이 나눌 필요 없음.

    // 하루루틴 함수를 다시 부른다면? -> 다시 불러져서 오전이 뜨지만 오후가 두번 뜨게 될 것
    public void 알바선택(개인연습생 플레이어) {
            System.out.println("1. 카페아르바이트 2. 인형탈아르바이트 3. 프로모터아르바이트 4. 뒤로가기");
            int value = sc.nextInt();
            if (value == 1) {
                카페아르바이트.능력치습득(플레이어);
            } else if (value == 2) {
                인형탈아르바이트.능력치습득(플레이어);
            } else if (value == 3) {
                프로모터아르바이트.능력치습득(플레이어);
            } else {
                System.out.println("이전 선택지로 이동합니다.");
            }
        }


    // 변수명이라 쓴 것을 카페아르바이트라고 바꾸는게 좋을 것 같음
    // 영어랑 한글 혼용해서 쓰는 것도 좋지는 않음. 불편함. 일관성이 있어야 판단이 빨라짐.
    // 각각 아르바이트 클래스 안에 메소드로 있는 것이 좋을 것 -> 파라미터나 코드가 간단해질 수 있음

    public void 트레이닝선택(개인연습생 플레이어) {
            System.out.println("1. 보컬 2. 랩 3. 댄스 4. 표정연구 5. 뒤로가기");
            int value = sc.nextInt();
            if (value == 1) {
                보컬트레이닝.능력치습득(플레이어);
            } else if (value == 2) {
                랩트레이닝.능력치습득(플레이어);
            } else if (value == 3) {
                댄스트레이닝.능력치습득(플레이어);
            } else if (value == 4) {
                표정연구하기.능력치습득(플레이어);
            } else {
                System.out.println("이전 선택지로 이동합니다.");
            }
        }

    // while문에서 벗어나려 하면 공부해보기 -->
    // 반복문으로 이거를 만들면 while(true)로 만들어서 계속 물어보게 만들고 break를 쓰거나 할 수 있음
    // switch문도 같은 것...조건문을 어차피 쓸 수 밖에 없긴하다.
    public void 하루선택지(개인연습생 플레이어) {
//        boolean 하루선택지 = true;
//        while (하루선택지) {
            System.out.println("1. 트레이닝 2. 아르바이트. 3. 아무 것도 하지 않기");
            int value = sc.nextInt();
            if (value == 1) {
                System.out.println("트레이닝을 받습니다.");
                System.out.println("어떤 트레이닝을 받을까요?");

                트레이닝선택(플레이어);

            } else if (value == 2) {
                System.out.println("아르바이트를 합니다.");
                System.out.println("어떤 아르바이트를 할까요?");
                알바선택(플레이어);
//                if (){
//
//                }
            } else if (value == 3) {
                System.out.println("아무 것도 하지 않고 다음 스케쥴을 진행합니다.");
//                하루선택지 = false;
            } else {
                System.out.println("1에서 3까지만 선택할 수 있습니다.");
                System.out.println("다시 숫자를 입력해주세요.");
            }
        }
//    }

    public void 하루루틴(개인연습생 플레이어) {
        System.out.println("오전에 할 일을 선택해 주세요");
        하루선택지(플레이어);
        System.out.println("오후에 할 일을 선택해 주세요.");
        하루선택지(플레이어);
        System.out.println("하루가 지났습니다.");
        플레이어.능력치보여주기();
    }

    // 반복문이라면 되돌리면 되고 반복문을 하지 않는다면
    public void 일주일루틴(개인연습생 플레이어) {
        System.out.println("한 주가 시작됩니다.");
        for (int i = 0; i < 5; i++) {
            하루루틴(플레이어);
        }
        System.out.println("토요일에 할 자유행동을 선택해주세요.");
        자유행동.토요일자유행동(플레이어);
        플레이어.능력치보여주기();
    }

    // 파라미터 값을 어떻게 줬냐에 따라서 라이벌 다르게 설정 가능, 함수 안에서 변하는 값들을 유연하게 넣으면
    // 함수에서 무엇을 넣어야 할지 명확하게 구상해보기
    public void 일요일무대(개인연습생 플레이어, 라이벌 라이벌) {
        라이벌.능력치보여주기();
        일요일반복(플레이어, 라이벌);
    }

    public void 일요일반복(개인연습생 플레이어, 라이벌 라이벌) {
        System.out.println("무대를 해야 할 시간입니다. 과연 최후까지 살아남을 수 있을까요?");
        System.out.println("국민 프로듀서분들께 어필할 행동을 선택해주세요.");


        // 스레드 -> 왜 이걸 3번 돌리려고 했는가? -> 끝나는 시점이 있으면 좋을 것 같다. 어느 점수까지 도달...같은 기준,
        // 성향에 따라 체력이 깎이면 좋다.
        // 국프의 선택을 먼저 많이 받은 애가 이기는 것. 몇 표 이상 받기가 좋은 것...


        // 간단한 예제 만들어서 테스트 해보고 넣기
        플레이어.set득표수(0);
        boolean 공연 = true;
        while (공연) {
            System.out.println("1. 공연하기 2. 개인기 선보이기");
            int value = sc.nextInt();
            if (value == 1) {
                플레이어.공연하기(); // 매개변수 이용 잘 못하고 있음. 매개변수 메서드를 이용해서 할 수 있다.
                System.out.println("현재 " + 플레이어.get이름() + "의 득표수는 " + 플레이어.get득표수() + "입니다.");
                라이벌.공연하기();
                System.out.println("현재 " + 라이벌.get이름() + "의 득표수는 " + 라이벌.get득표수() + "입니다.");

                if (플레이어.get득표수() >= 1000000 && 라이벌.get득표수() < 1000000) {
                    플레이어.등급상승();
                    if (플레이어.get등급().equals("A")) {
                        System.out.println(플레이어.get이름() + "가 A등급이 되어 아이돌 데뷔에 성공했습니다.");
                        System.exit(0);
                    } else {
                        System.out.println("1. 진행하기 2. 상태창 3. 소지물품 4. 의상실 5. 상점 6. 자진하차");
                        break;
                    }
                } else if (플레이어.get득표수() < 1000000 && 라이벌.get득표수() >= 1000000) {
                    System.out.println("아쉽게도 다른 연습생이 먼저 100,000표를 달성하여 플레이어가 탈락했습니다.");
                    System.exit(0);
                } else if (플레이어.get득표수() >= 1000000 && 라이벌.get득표수() >= 1000000) {
                    if (플레이어.get득표수() >= 라이벌.get득표수()) {
                        플레이어.등급상승();
                        break;
                    } else {
                        System.out.println("아쉽게도 다른 연습생이 더 많은 득표수를 달성하여 플레이어가 탈락했습니다.");
                        System.exit(0);
                    }
                } else {
                    System.out.println("다시 스킬을 사용합니다.");
                }
            } else if (value == 2) {
                플레이어.자기소개타임();
                value = sc.nextInt();
                플레이어.개인기선보이기(value);
                System.out.println("현재 " + 플레이어.get이름() + "의 득표수는 " + 플레이어.get득표수() + "입니다.");
                라이벌.개인기선보이기(랜덤.nextInt(4) + 1);
                System.out.println("현재 " + 라이벌.get이름() + "의 득표수는 " + 라이벌.get득표수() + "입니다.");
                if (플레이어.get득표수() >= 1000000 && 라이벌.get득표수() < 1000000) {
                    플레이어.등급상승();
                    if (플레이어.get등급().equals("A")) {
                        System.out.println(플레이어.get이름() + "가 A등급이 되어 아이돌 데뷔에 성공했습니다.");
                        System.exit(0);
                    } else {
                        System.out.println("1. 진행하기 2. 상태창 3. 소지물품 4. 의상실 5. 상점 6. 자진하차");
                        break;
                    }
                } else if (플레이어.get득표수() < 1000000 && 라이벌.get득표수() >= 1000000) {
                    System.out.println("아쉽게도 다른 연습생이 먼저 100,000표를 달성하여 플레이어가 탈락했습니다.");
                    System.exit(0);
                } else if (플레이어.get득표수() >= 1000000 && 라이벌.get득표수() >= 1000000) {
                    if (플레이어.get득표수() >= 라이벌.get득표수()) {
                        플레이어.등급상승();
                        break;
                    } else {
                        System.out.println("아쉽게도 다른 연습생이 더 많은 득표수를 달성하여 플레이어가 탈락했습니다.");
                        System.exit(0);
                    }
                } else {
                    System.out.println("다시 스킬을 사용합니다.");
                }
            }
        }
    }

}


// 자유행동도 클래스 안에 넣어 놓는 것이 좋은 선택이다.
// 메소드로 정의해주는게 좋을 것
// 이렇게도 저렇게도 할 수 있음. 자유도가 있지만 일관성이 있어야 하고 클래스화 시킬 필요없는 것은 굳이 필요없음
// 코드 위치에 대해서 생각해보기
// 판단할 때 클래스를 불필요하게 사용할 필요없음 사용하지 않아도 됨
// 일관성이 사람의 뇌를 덜 사용하게 해준다.
// 기능 만들면서 코드 짜면서 돌리면서 짜야한다. -> 안돌아가는 코드의 양이 많으면 곤란해진다.



